# The circles with noise added
circ1_noise = circ1 %>% mutate() %>% mutate(x1 = x1 + rnorm(npoints, sd = sigma), x2 = x2 + rnorm(npoints, sd = sigma))
circ2_noise = circ2 %>% mutate() %>% mutate(x1 = x1 +rnorm(npoints, sd = sigma), x2 = x2 + rnorm(npoints, sd = sigma))
# The data matrices
df_1 = rbind(circ1, circ2)
df_2 = rbind(circ1_noise, circ2_noise)
df = df_2
# Make the plot
ggplot(data = df, aes(x = x1, y = x2)) + geom_point()
vr = vietoris_rips(dataset = df, dim = 1, return_format = "mat")
plot_persistence_diagram(vr %>% data.frame(), TRUE)
# Number of points to simulate
sigma = 0.00 # Test the noise term concept with 0.1
npoints = 100
# The noise-free circle
circ1 = circleUnif(npoints, 1) %>% as_tibble()
circ2 = circleUnif(npoints, 2) %>% as_tibble()
# The circles with noise added
circ1_noise = circ1 %>% mutate() %>% mutate(x1 = x1 + rnorm(npoints, sd = sigma), x2 = x2 + rnorm(npoints, sd = sigma))
circ2_noise = circ2 %>% mutate() %>% mutate(x1 = x1 +rnorm(npoints, sd = sigma), x2 = x2 + rnorm(npoints, sd = sigma))
# The data matrices
df_1 = rbind(circ1, circ2)
df_2 = rbind(circ1_noise, circ2_noise)
df = df_2
# Make the plot
ggplot(data = df, aes(x = x1, y = x2)) + geom_point()
vr = vietoris_rips(dataset = df, dim = 1, return_format = "mat")
plot_persistence_diagram(vr %>% data.frame(), TRUE)
N = nrow(df)
M = 100
max_persistence = numeric(M)
for(m in 1:M){
df_sample = df %>% slice_sample(n = N, replace = TRUE)
vr_sample = vietoris_rips(dataset = df_sample, dim = 1) %>%
filter(dimension==1) %>% mutate(persistence = death - birth)
max_persistence[m] = max(vr_sample$persistence)
}
alpha <- 1.0
(lower_bound = quantile(max_persistence, probs = alpha/2))
(upper_bound = quantile(max_persistence, probs = 1 - alpha/2))
plot_empirical_confidence_band(vr, lower_bound)
# Number of points to simulate
sigma = 0.00 # Test the noise term concept with 0.1
npoints = 100
# The noise-free circle
circ1 = circleUnif(npoints, 1) %>% as_tibble()
circ2 = circleUnif(npoints, 1) %>% as_tibble()
# The circles with noise added
circ1_noise = circ1 %>% mutate() %>% mutate(x1 = x1 + rnorm(npoints, sd = sigma), x2 = x2 + rnorm(npoints, sd = sigma))
circ2_noise = circ2 %>% mutate() %>% mutate(x1 = x1 +rnorm(npoints, sd = sigma), x2 = x2 + rnorm(npoints, sd = sigma))
# The data matrices
df_1 = rbind(circ1, circ2)
df_2 = rbind(circ1_noise, circ2_noise)
df = df_2
# Make the plot
ggplot(data = df, aes(x = x1, y = x2)) + geom_point()
vr = vietoris_rips(dataset = df, dim = 1, return_format = "mat")
plot_persistence_diagram(vr %>% data.frame(), TRUE)
library(shiny)
library(leaflet)
library(sf)
library(dplyr)
library(lubridate)
library(RColorBrewer)
library(ggplot2)
library(plotly)
# Read and preprocess the datasets
counties_geojson <- st_read("counties.geojson")
tweets_df <- read.csv("tweets_data.csv")
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(dplyr)
library(ggplot2)
library(stats)
data_lod = read.csv("output-lod.txt", sep = ",", header = TRUE)[, 1:5]
data_lod$Status = "Observed"
# make the plot
data_lod = data_lod %>% mutate(Date = as.Date(paste(Year, Month, Day, sep = "-")), lod = lod - mean(lod))
write.csv(data_lod, "lod_data.csv", row.names = F)
data_lod[4745:5447, 6] = "Missing"
data_lod[8378:9545, 6] = "Missing"
data_lod[12823:13051, 6] = "Missing"
ggplot(data = data_lod) + geom_line(aes(x = Date, y = lod), color = "#06b6ff") + theme_bw() + ylab("Length(s)")
ggsave("lod-plot.png", height = 4, width = 6, dpi = 300)
# The time series vector
series = data_lod$lod
# The spectral density of AR(1)
spd_ar1 <- function(frequency, phi, sigma2) {
# This is for the optimization process, to prevent estimating valyes
# outside the required stationarity conditions
if (sigma2 <= 0) {
return(.Machine$double.xmax)
}
if (abs(phi) >= 1) {
return(.Machine$double.xmax)
}
numerator <- sigma2
denominator <- 1 - 2 * phi * cos(2 * pi * frequency) + phi^2
# Checl possible division by zero or negative values
if (denominator <= 0) {
return(.Machine$double.xmax)
}
return(numerator / denominator)
}
# AR model using the Yule-Walker method
st = Sys.time()
ar_model_yw <- ar(series, aic = FALSE, order.max = 1, method = "yule-walker")
yw_runtime = Sys.time() - st
# Get the coefficients estimates
yw_phi <- ar_model_yw$ar
yw_sigma <- ar_model_yw$var.pred
whittle_log_likelihood_ar1 <- function(params, x) {
N <- length(x)
delta_t <- 1
phi <- params[1]
sigma2 <- params[2]
# Calculate the spectral density at each frequency
frequencies <- (0:(N/2)) / (N * delta_t)
spectral_densities <- sapply(frequencies, spd_ar1, phi, sigma2)
# DFT of the time series
dft <- fft(x)[1:(N/2 + 1)]
# Squared magnitudes of the DFT coefficients
dft_magnitudes_squared <- Mod(dft)^2 / N
# Compute the Whittle log-likelihood
log_likelihood_parts <- mapply(function(S, x_sq) {
if (S <= 0) {
return(.Machine$double.xmax)
}
-log(S) - x_sq / (S * delta_t)
}, S = spectral_densities, x_sq = dft_magnitudes_squared)
# Negate for minimization
log_likelihood <- -sum(log_likelihood_parts)
# Check for large values in the estimat
if (is.finite(log_likelihood)) {
return(log_likelihood)
} else {
return(.Machine$double.xmax)
}
}
st = Sys.time()
whittle_optimize <- optim(
par = c(phi = 0.5, sigma2 = 1),
fn = whittle_log_likelihood_ar1,
x = series,
method = "L-BFGS-B",
lower = c(-1, 1e-6),
upper = c(1, Inf),
control = list(maxit = 1000)
)
wt_runtime = Sys.time() - st
wt_phi <- (whittle_optimize$par)[1]
wt_sigma <- (whittle_optimize$par)[2]
frequencies <- seq(0, 0.5, length.out = 1000)
spd_yw <- sapply(frequencies, spd_ar1, phi=yw_phi[1], sigma2=yw_sigma[1])
spd_wt <- sapply(frequencies, spd_ar1, phi=wt_phi, sigma2=wt_sigma)
# Calculate the spectral density over the range of frequencies
spectral_values <- data.frame(Frequencies = rep(frequencies, 2), SPD = c(spd_yw, spd_wt), Method = rep(c("Yule-Walker", "Whittle-Approximation"), each = 1000))
# Plot the spectral density
spectral_values %>%
ggplot() +
geom_line(aes(x = Frequencies, y = SPD, color = Method, linetype = Method), linewidth = 1.2) +
theme_bw() + theme(legend.position = "top") + scale_y_log10() + ylab("Log Spectral Density")
# load the data set
original_series = read.csv("original_series.csv")
ggplot(data = original_series, aes(x = x1, y = x2)) +
geom_line() + theme_bw() + labs(x = "t", y = "X(t)")
taper_uniform = read.csv("tapered_uniform_series.csv")
taper_nonuniform = read.csv("tapered_nonuniform_series.csv") %>% mutate(x2 = x2/2)
taper_series = rbind(taper_uniform, taper_nonuniform)
taper_series$Group = c(rep("Uniform", nrow(taper_uniform)), rep("Non-Uniform", nrow(taper_nonuniform)))
ggplot(data = taper_series, aes(x = x1, y = x2, color = Group)) +
geom_line() + theme_bw() + labs(x = "Frequency", y = "Spectrum")
library(nonlinearTseries)
library(plotly)
embed_orig = buildTakens(original_series$x2, 3, 1)
embed_taper_uni = buildTakens(taper_uniform$x2, 3, 1)
embed_taper_nonuni = buildTakens(taper_nonuniform$x2, 3, 1)
fig <- plot_ly(x = ~embed_orig[, 1], y = ~embed_orig[, 2], z = ~embed_orig[, 3], type = 'scatter3d', mode = 'markers')
fig <- fig %>% layout(title = "3D Scatter plot")
fig
fig <- plot_ly(x = ~embed_taper_uni[, 1], y = ~embed_taper_uni[, 2], z = ~embed_taper_uni[, 3], type = 'scatter3d', mode = 'markers')
fig <- fig %>% layout(title = "3D Scatter plot")
fig
fig <- plot_ly(x = ~embed_taper_nonuni[, 1], y = ~embed_taper_nonuni[, 2], z = ~embed_taper_nonuni[, 3], type = 'scatter3d', mode = 'markers')
fig <- fig %>% layout(title = "3D Scatter plot")
fig
library(ripserr)
pers_hom1 <- vietoris_rips(embed_orig, dim = 1, format = "cloud", return_format = "df") %>%
mutate(ind = as.factor(5*dimension))
# Compute the breaks
breaks <- pretty(pers_hom1$death)  # Use the pretty function to get usual tick marks
breaks <- c(breaks, max(breaks) + breaks[2])  # Ensure the maximum value is included
# Compute the labels
labels <- as.character(breaks)
labels[labels == max(labels)] <- expression(infinity)
ggplot(pers_hom1) +
geom_point(aes(x = birth, y = death, shape = ind, color = ind), size = 2.0) +
geom_hline(yintercept = max(breaks), linetype = "dashed", color = "red") +
geom_point(aes(x = 0, y = max(breaks)), color = "red") +
geom_abline(intercept = 0, slope = 1) +
scale_y_continuous(breaks = breaks, labels =  labels) +
theme_bw() +
geom_abline(intercept = 0, slope = 1) +
xlab("Birth") + ylab("Death") + #xlim(c(0, 1.5)) + ylim(c(0, 2)) +
scale_shape_manual(name = "",
labels = c(expression(H[0]), expression(H[1])),
values = c(16, 17)) +
scale_colour_manual(name="",
labels=c(expression(H[0]), expression(H[1])),
values=c("Red", "#619CFF")) +
theme(text = element_text(size=20),
legend.box.background = element_rect(color = "black"),
legend.title=element_blank(),
legend.position = c(0.8, 0.2),
legend.margin = margin(0, 0, 0, 0),
legend.spacing.x = unit(0, "mm"),
legend.spacing.y = unit(0, "mm"))
ggsave("original_pd.png", dpi = 300)
pers_hom2 <- vietoris_rips(embed_taper_uni, dim = 1, format = "cloud", return_format = "df") %>%
mutate(ind = as.factor(5*dimension))
# Compute the breaks
breaks <- pretty(pers_hom2$death)  # Use the pretty function to get usual tick marks
breaks <- c(breaks, max(breaks) + breaks[2])  # Ensure the maximum value is included
# Compute the labels
labels <- as.character(breaks)
labels[labels == max(labels)] <- expression(infinity)
ggplot(pers_hom2) +
geom_point(aes(x = birth, y = death, shape = ind, color = ind), size = 2.0) +
geom_hline(yintercept = max(breaks), linetype = "dashed", color = "red") +
geom_point(aes(x = 0, y = max(breaks)), color = "red") +
geom_abline(intercept = 0, slope = 1) +
scale_y_continuous(breaks = breaks, labels =  labels) +
theme_bw() +
geom_abline(intercept = 0, slope = 1) +
xlab("Birth") + ylab("Death") + #xlim(c(0, 1.5)) + ylim(c(0, 2)) +
scale_shape_manual(name = "",
labels = c(expression(H[0]), expression(H[1])),
values = c(16, 17)) +
scale_colour_manual(name="",
labels=c(expression(H[0]), expression(H[1])),
values=c("Red", "#619CFF")) +
theme(text = element_text(size=20),
legend.box.background = element_rect(color = "black"),
legend.title=element_blank(),
legend.position = c(0.8, 0.2),
legend.margin = margin(0, 0, 0, 0),
legend.spacing.x = unit(0, "mm"),
legend.spacing.y = unit(0, "mm"))
ggsave("taper_uni_pd.png", dpi = 300)
pers_hom3 <- vietoris_rips(embed_taper_nonuni, dim = 1, format = "cloud", return_format = "df") %>%
mutate(ind = as.factor(5*dimension))
# Compute the breaks
breaks <- pretty(pers_hom3$death)  # Use the pretty function to get usual tick marks
breaks <- c(breaks, max(breaks) + breaks[2])  # Ensure the maximum value is included
# Compute the labels
labels <- as.character(breaks)
labels[labels == max(labels)] <- expression(infinity)
ggplot(pers_hom3) +
geom_point(aes(x = birth, y = death, shape = ind, color = ind), size = 2.0) +
geom_hline(yintercept = max(breaks), linetype = "dashed", color = "red") +
geom_point(aes(x = 0, y = max(breaks)), color = "red") +
geom_abline(intercept = 0, slope = 1) +
scale_y_continuous(breaks = breaks, labels =  labels) +
theme_bw() +
geom_abline(intercept = 0, slope = 1) +
xlab("Birth") + ylab("Death") + #xlim(c(0, 1.5)) + ylim(c(0, 2)) +
scale_shape_manual(name = "",
labels = c(expression(H[0]), expression(H[1])),
values = c(16, 17)) +
scale_colour_manual(name="",
labels=c(expression(H[0]), expression(H[1])),
values=c("Red", "#619CFF")) +
theme(text = element_text(size=20),
legend.box.background = element_rect(color = "black"),
legend.title=element_blank(),
legend.position = c(0.8, 0.2),
legend.margin = margin(0, 0, 0, 0),
legend.spacing.x = unit(0, "mm"),
legend.spacing.y = unit(0, "mm"))
ggsave("taper_nonuni_pd.png", dpi = 300)
library(TDA)
pers_hom1 <- vietoris_rips(embed_orig, dim = 1, format = "cloud", return_format = "mat")
pers_hom2 <- vietoris_rips(embed_taper_uni, dim = 1, format = "cloud", return_format = "mat")
pers_hom3 <- vietoris_rips(embed_taper_nonuni, dim = 1, format = "cloud", return_format = "mat")
wasserstein(pers_hom1, pers_hom2, dimension = 0) +wasserstein(pers_hom1, pers_hom2, dimension = 2)
wasserstein(pers_hom1, pers_hom3, dimension = 0) +wasserstein(pers_hom1, pers_hom3, dimension = 2)
wasserstein(pers_hom3, pers_hom2, dimension = 0) +wasserstein(pers_hom3, pers_hom2, dimension = 2)
embed = buildTakens(data_lod$lod, 300, 1)
pca = prcomp(embed, center = FALSE, scale = TRUE)
fig <- plot_ly(x = ~pca$x[, 1], y = ~pca$x[, 2], z = ~pca$x[, 3], type = 'scatter3d', mode = 'markers', alpha = 0.5, size = 0.1)
fig <- fig %>% layout(title = "3D Scatter plot")
fig <- fig %>% layout(
scene = list(
xaxis = list(
title = "x"  # X-axis label
),
yaxis = list(
title = "y"  # Y-axis label
),
zaxis = list(
title = "z"  # Z-axis label
)
)
)
fig
embed = buildTakens(data_lod$lod, 100, 1)
pca = prcomp(embed, center = FALSE, scale = TRUE)
fig <- plot_ly(x = ~pca$x[, 1], y = ~pca$x[, 2], z = ~pca$x[, 3], type = 'scatter3d', mode = 'markers', alpha = 0.5, size = 0.1)
fig <- fig %>% layout(title = "3D Scatter plot")
fig <- fig %>% layout(
scene = list(
xaxis = list(
title = "x"  # X-axis label
),
yaxis = list(
title = "y"  # Y-axis label
),
zaxis = list(
title = "z"  # Z-axis label
)
)
)
fig
embed = buildTakens(data_lod$lod, 30, 1)
pca = prcomp(embed, center = FALSE, scale = TRUE)
fig <- plot_ly(x = ~pca$x[, 1], y = ~pca$x[, 2], z = ~pca$x[, 3], type = 'scatter3d', mode = 'markers', alpha = 0.5, size = 0.1)
fig <- fig %>% layout(title = "3D Scatter plot")
fig <- fig %>% layout(
scene = list(
xaxis = list(
title = "x"  # X-axis label
),
yaxis = list(
title = "y"  # Y-axis label
),
zaxis = list(
title = "z"  # Z-axis label
)
)
)
fig
dim(embed)
embed = buildTakens(data_lod$lod, 100, 1)
pca = prcomp(embed, center = FALSE, scale = TRUE)
fig <- plot_ly(x = ~pca$x[, 1], y = ~pca$x[, 2], z = ~pca$x[, 3], type = 'scatter3d', mode = 'markers', alpha = 0.5, size = 0.1)
fig <- fig %>% layout(title = "3D Scatter plot")
fig <- fig %>% layout(
scene = list(
xaxis = list(
title = "x"  # X-axis label
),
yaxis = list(
title = "y"  # Y-axis label
),
zaxis = list(
title = "z"  # Z-axis label
)
)
)
fig
dim(embed)
embed = buildTakens(data_lod$lod, 30, 5)
pca = prcomp(embed, center = FALSE, scale = TRUE)
fig <- plot_ly(x = ~pca$x[, 1], y = ~pca$x[, 2], z = ~pca$x[, 3], type = 'scatter3d', mode = 'markers', alpha = 0.5, size = 0.1)
fig <- fig %>% layout(title = "3D Scatter plot")
fig <- fig %>% layout(
scene = list(
xaxis = list(
title = "x"  # X-axis label
),
yaxis = list(
title = "y"  # Y-axis label
),
zaxis = list(
title = "z"  # Z-axis label
)
)
)
fig
embed = buildTakens(data_lod$lod, 30, 1)
pca = prcomp(embed, center = FALSE, scale = TRUE)
fig <- plot_ly(x = ~pca$x[, 1], y = ~pca$x[, 2], z = ~pca$x[, 3], type = 'scatter3d', mode = 'markers', alpha = 0.5, size = 0.1)
fig <- fig %>% layout(title = "3D Scatter plot")
fig <- fig %>% layout(
scene = list(
xaxis = list(
title = "x"  # X-axis label
),
yaxis = list(
title = "y"  # Y-axis label
),
zaxis = list(
title = "z"  # Z-axis label
)
)
)
fig
real_taper_uniform = read.csv("real_tapered_uniform_series.csv")
real_taper_nonuniform = read.csv("real_tapered_nonuniform_series.csv") %>% mutate(x2 = x2/2)
real_taper_series = rbind(real_taper_uniform, real_taper_nonuniform)
real_taper_series$Group = c(rep("Uniform", nrow(real_taper_uniform)), rep("Non-Uniform", nrow(real_taper_nonuniform)))
ggplot(data = real_taper_series, aes(x = x1, y = x2, color = Group)) +
geom_line() + theme_bw() + labs(x = "Frequency", y = "Spectrum")
embed = buildTakens(data_lod$lod, 30, 1)
embed_orig = prcomp(embed, center = FALSE, scale = TRUE)$x
embed_taper_uni = buildTakens(real_taper_uniform$x2, 3, 1)
embed_taper_nonuni = buildTakens(real_taper_nonuniform$x2, 3, 1)
fig <- plot_ly(x = ~embed_orig[, 1], y = ~embed_orig[, 2], z = ~embed_orig[, 3], type = 'scatter3d', mode = 'markers')
fig <- fig %>% layout(title = "3D Scatter plot")
fig
fig <- plot_ly(x = ~embed_taper_uni[, 1], y = ~embed_taper_uni[, 2], z = ~embed_taper_uni[, 3], type = 'scatter3d', mode = 'markers')
fig <- fig %>% layout(title = "3D Scatter plot")
fig
fig <- plot_ly(x = ~embed_taper_nonuni[, 1], y = ~embed_taper_nonuni[, 2], z = ~embed_taper_nonuni[, 3], type = 'scatter3d', mode = 'markers')
fig <- fig %>% layout(title = "3D Scatter plot")
fig
dim(embed_orig)
pers_hom1 <- vietoris_rips(embed_orig[, 1:3], dim = 1, format = "cloud", return_format = "df") %>%
mutate(ind = as.factor(5*dimension))
# Compute the breaks
breaks <- pretty(pers_hom1$death)  # Use the pretty function to get usual tick marks
breaks <- c(breaks, max(breaks) + breaks[2])  # Ensure the maximum value is included
# Compute the labels
labels <- as.character(breaks)
labels[labels == max(labels)] <- expression(infinity)
ggplot(pers_hom1) +
geom_point(aes(x = birth, y = death, shape = ind, color = ind), size = 2.0) +
geom_hline(yintercept = max(breaks), linetype = "dashed", color = "red") +
geom_point(aes(x = 0, y = max(breaks)), color = "red") +
geom_abline(intercept = 0, slope = 1) +
scale_y_continuous(breaks = breaks, labels =  labels) +
theme_bw() +
geom_abline(intercept = 0, slope = 1) +
xlab("Birth") + ylab("Death") + #xlim(c(0, 1.5)) + ylim(c(0, 2)) +
scale_shape_manual(name = "",
labels = c(expression(H[0]), expression(H[1])),
values = c(16, 17)) +
scale_colour_manual(name="",
labels=c(expression(H[0]), expression(H[1])),
values=c("Red", "#619CFF")) +
theme(text = element_text(size=20),
legend.box.background = element_rect(color = "black"),
legend.title=element_blank(),
legend.position = c(0.8, 0.2),
legend.margin = margin(0, 0, 0, 0),
legend.spacing.x = unit(0, "mm"),
legend.spacing.y = unit(0, "mm"))
ggsave("real_original_pd.png", dpi = 300)
write.csv(pers_hom1, "real_persistence.csv", row.names = F)
pers_hom2 <- vietoris_rips(embed_taper_uni, dim = 1, format = "cloud", return_format = "df") %>%
mutate(ind = as.factor(5*dimension))
# Compute the breaks
breaks <- pretty(pers_hom2$death)  # Use the pretty function to get usual tick marks
breaks <- c(breaks, max(breaks) + breaks[2])  # Ensure the maximum value is included
# Compute the labels
labels <- as.character(breaks)
labels[labels == max(labels)] <- expression(infinity)
ggplot(pers_hom2) +
geom_point(aes(x = birth, y = death, shape = ind, color = ind), size = 2.0) +
geom_hline(yintercept = max(breaks), linetype = "dashed", color = "red") +
geom_point(aes(x = 0, y = max(breaks)), color = "red") +
geom_abline(intercept = 0, slope = 1) +
scale_y_continuous(breaks = breaks, labels =  labels) +
theme_bw() +
geom_abline(intercept = 0, slope = 1) +
xlab("Birth") + ylab("Death") + #xlim(c(0, 1.5)) + ylim(c(0, 2)) +
scale_shape_manual(name = "",
labels = c(expression(H[0]), expression(H[1])),
values = c(16, 17)) +
scale_colour_manual(name="",
labels=c(expression(H[0]), expression(H[1])),
values=c("Red", "#619CFF")) +
theme(text = element_text(size=20),
legend.box.background = element_rect(color = "black"),
legend.title=element_blank(),
legend.position = c(0.8, 0.2),
legend.margin = margin(0, 0, 0, 0),
legend.spacing.x = unit(0, "mm"),
legend.spacing.y = unit(0, "mm"))
ggsave("real_origina_taper_uni_pd.png", dpi = 300)
pers_hom3 <- vietoris_rips(embed_taper_nonuni, dim = 1, format = "cloud", return_format = "df") %>%
mutate(ind = as.factor(5*dimension))
# Compute the breaks
breaks <- pretty(pers_hom3$death)  # Use the pretty function to get usual tick marks
breaks <- c(breaks, max(breaks) + breaks[2])  # Ensure the maximum value is included
# Compute the labels
labels <- as.character(breaks)
labels[labels == max(labels)] <- expression(infinity)
ggplot(pers_hom3) +
geom_point(aes(x = birth, y = death, shape = ind, color = ind), size = 2.0) +
geom_hline(yintercept = max(breaks), linetype = "dashed", color = "red") +
geom_point(aes(x = 0, y = max(breaks)), color = "red") +
geom_abline(intercept = 0, slope = 1) +
scale_y_continuous(breaks = breaks, labels =  labels) +
theme_bw() +
geom_abline(intercept = 0, slope = 1) +
xlab("Birth") + ylab("Death") + #xlim(c(0, 1.5)) + ylim(c(0, 2)) +
scale_shape_manual(name = "",
labels = c(expression(H[0]), expression(H[1])),
values = c(16, 17)) +
scale_colour_manual(name="",
labels=c(expression(H[0]), expression(H[1])),
values=c("Red", "#619CFF")) +
theme(text = element_text(size=20),
legend.box.background = element_rect(color = "black"),
legend.title=element_blank(),
legend.position = c(0.8, 0.2),
legend.margin = margin(0, 0, 0, 0),
legend.spacing.x = unit(0, "mm"),
legend.spacing.y = unit(0, "mm"))
ggsave("real_original_taper_non-uni_pd.png", dpi = 300)
shiny::runApp('Dropbox/Coursework/STAT992/Project/TwitterTrends')
